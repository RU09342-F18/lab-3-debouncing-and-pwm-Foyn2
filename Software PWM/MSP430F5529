#include <msp430.h>

int pwm = 500; //Sets the value of the pwm to start at 50% 
int state = 0; //Sets the beginning state for the debounce timer
int main(void)
{
    WDTCTL = WDTPW | WDTHOLD;               // stop watchdog timer
    
    //Button Configurations
    P1DIR &= ~BIT1;                         //SET P1.1 AS INPUT
    P1REN |= BIT1;                          //ENABLED PULL UP OR DOWN FOR P1.1
    P1OUT |= BIT1;                          //SPECIFIED AS A PULLUP FOR P1.1
    P1IE |= BIT1;                           //SET P1.1 INTERRUPT ENABLED (S2)
    P1IFG &= ~BIT1;                         //P1.1 IFG CLEARED
    P1IES |= BIT1;                          //TOGGLE INTERRUPT EDGE: HIGH TO LOW
    
    //Outputs
    P1DIR |= BIT0; //Sets P1.0 to be an output pin (LED)
    P1OUT &= ~BIT0; //Sets the LED to be off to start (at 50% pwm in this case)
    
    //Code for Pulse Width Modulation (PWM) Timer
    TA0CCR0 = 1000; //Sets the Capture Compare Register frequency
    TA0CTL = TASSEL_2 + MC_1 + TACLR; //Sub-main Clock(SMCLK) is set to up mode, clears the timer to zero, and enables the timer a interrupt

    //Code for Debounce Timer
    TA1CCTL0 = CCIE;                    // Enables the CCR0 interrupt 
    TA1CCR0 = 50000;                    //Sets the timer to overflow every 10ms (debounce timer)

    
    __bis_SR_register(GIE);     // Enters low power mode and enables the general interrupts
    for(;;) //infinite for loop
    {
        if(TA0R <= pwm) P1OUT ^= BIT0; // pwm/1000 * 100% will equal the duty cycle
        else if (TA0R > pwm) P1OUT &= ~BIT0; //turns the LED off if TA0R is greater than the pwm
    }
}

#pragma vector=PORT1_VECTOR //Interrupt 1 where the LED is toggled and timer A starts
__interrupt void PORT_1(void) //Enables the interrupt
{
        switch(state) //Switch state is made for the different LED cases
        {
        case 0: //The scenario where the LED goes from off to on
            TA1CTL = TASSEL_2 + MC_1 + TACLR;       //Activates the timer (UP mode, goes into case 0 in the timer ISR)
            P1IFG &= ~BIT1;                         //Clears the interrupt flag on P1.1
            P1IE &= ~BIT1;                          //Disables the interrupts for P1.1 
            break;
        case 1: //The scenario where the LED goes from on to off
            TA1CTL = TASSEL_2 + MC_1 + TACLR;       //Activates the timer (UP mode, goes into case 1 in the timer ISR)
            P1IFG &= ~BIT1;                         //Clears the interrupt flag on P1.1
            P1IE &= ~BIT1;                          //Disables the interrupts for P1.1 
            break;
        }
}

#pragma vector=TIMER1_A0_VECTOR //Interrupt 2 where the LED is toggled and Timer A starts
__interrupt void Timer_A0 (void) //Enables the interrupt
{
        switch(state)
        {
        case 0://When the LED is on and stays on
            if(pwm < 1000) pwm += 100;  //Checks if the duty cycle is less than 100%, adds 10% to the duty cycle
            else pwm = 0;               //Blinks the LED
            P1IE |= BIT1;               //Re-enables the interrupts that were previously disabled
            P1IES &= ~BIT1;             //Toggles the interrupt edge and enables Low to High behavior when the button is released
            TA1CTL &= ~TASSEL_2;        //Stops the timer
            TA1CTL |= TACLR;            //Clears the timer
            state = 1;                  //Continues to the next state in port 1 ISR when the button is pressed
            break;
        case 1://When the LED is going off and stays off
            P1IE |= BIT1;               //Enables the interrupt on P1.1
            P1IFG &= ~BIT1;             //Clears the interrupt flag on P1.1
            P1IES |= BIT1;              //Toggles the interrupt edge and enables high to low behavior
            TA1CTL &= ~TASSEL_2;        //Stops the timer
            TA1CTL |= TACLR;            //Clears the timer
            state = 0;                  //Goes back to case 0 of port 1 ISR when the button is pressed
            break;
        }


}
